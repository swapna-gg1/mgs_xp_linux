def generateHarmonyFile():
	headerFile = File("generated/le_gen_harmony.h")
	headerFile.summary = "Autogenerated header file for the Legato graphics library."
	headerFile.description = "This file contains autogenerated code that binds the Legato graphics library\n    and the MPLAB Harmony framework together."
	headerFile.writeDescription()
	headerFile.writeNewLine()
	
	headerFile.write("#ifndef LE_HARMONY_H")
	headerFile.write("#define LE_HARMONY_H")
	headerFile.writeNewLine()
	headerFile.write('#include "gfx/legato/generated/le_gen_init.h"')
	headerFile.writeNewLine()
	headerFile.write("typedef enum")
	headerFile.write("{")
	headerFile.write("	LEGATO_STATE_INIT = 0,")
	headerFile.write("	LEGATO_STATE_RUNNING,")
	headerFile.write("	LEGATO_STATE_ERROR")
	headerFile.write("} LegatoState;")
	headerFile.writeNewLine()
	headerFile.write("/******************************************************************************")
	headerFile.write("  Function:")
	headerFile.write("	void Legato_Initialize(void)")
	headerFile.writeNewLine()
	headerFile.write("  Summary:")
	headerFile.write("	This function initializes the Legato state machine.")
	headerFile.write(" */")
	headerFile.write("void Legato_Initialize(void);")
	headerFile.writeNewLine()
	headerFile.writeNewLine()
	headerFile.write("/******************************************************************************")
	headerFile.write("  Function:")
	headerFile.write("	void Legato_Tasks(void);")
	headerFile.writeNewLine()
	headerFile.write("  Summary:")
	headerFile.write("	This function is called in SYS_Tasks.")
	headerFile.write("*/")
	headerFile.write("void Legato_Tasks(void);")
	headerFile.writeNewLine()
	headerFile.writeNewLine()
	headerFile.write("//DOM-IGNORE-BEGIN")
	headerFile.write("#ifdef __cplusplus")
	headerFile.write("}")
	headerFile.write("#endif")
	headerFile.write("//DOM-IGNORE-END")
	headerFile.writeNewLine()
	headerFile.write("#endif // LE_HARMONY_H")
	
	headerFile.close()
	
	global fileDict
	fileDict[headerFile.name] = headerFile
	
	sourceFile = File("generated/le_gen_harmony.c")
	sourceFile.summary = "Autogenerated source file for the Legato graphics library."
	sourceFile.description = "This file contains autogenerated code that binds the Legato graphics library\n    and the MPLAB Harmony framework together."
	sourceFile.writeDescription()
	sourceFile.writeNewLine()
	sourceFile.write('#include "gfx/legato/generated/le_gen_harmony.h"')
	sourceFile.writeNewLine()
	sourceFile.write('#include "definitions.h"')
	sourceFile.writeNewLine()
	
	if StateManager.getBoolean("ENABLE_INPUT_CODE_GENERATION") == True:
		sourceFile.write('#include "system/input/sys_input.h"')
		
	sourceFile.writeNewLine()
	
	if StateManager.getBoolean("ENABLE_INPUT_CODE_GENERATION") == True:
		sourceFile.write('// Input System Service interface code')
		sourceFile.write('SYS_INP_InputListener inputListener;')
		sourceFile.writeNewLine()
		sourceFile.write('static void touchDownHandler(const SYS_INP_TouchStateEvent* const evt);')
		sourceFile.write('static void touchUpHandler(const SYS_INP_TouchStateEvent* const evt);')
		sourceFile.write('static void touchMoveHandler(const SYS_INP_TouchMoveEvent* const evt);')
		sourceFile.writeNewLine()
		
	sourceFile.writeNewLine()
	sourceFile.write("static LegatoState legatoState;")
	sourceFile.writeNewLine()
	sourceFile.write("void Legato_Initialize(void)")
	sourceFile.write("{")
	sourceFile.write("    leInitialize(&%s);" % _DRIVER_INTERFACE_NAME)
	sourceFile.writeNewLine()
	sourceFile.write("    legato_initialize();")
	sourceFile.writeNewLine()
	
	if StateManager.getBoolean("ENABLE_INPUT_CODE_GENERATION") == True:
		sourceFile.write("    inputListener.handleTouchDown = &touchDownHandler;")
		sourceFile.write("    inputListener.handleTouchUp = &touchUpHandler;")
		sourceFile.write("    inputListener.handleTouchMove = &touchMoveHandler;")
		sourceFile.writeNewLine()
	
	sourceFile.write("    legatoState = LEGATO_STATE_INIT;")
	sourceFile.write("}")
	sourceFile.writeNewLine()
	sourceFile.write("void Legato_Tasks(void)")
	sourceFile.write("{")
	sourceFile.write("    switch(legatoState)")
	sourceFile.write("    {")
	sourceFile.write("        case LEGATO_STATE_INIT:")
	sourceFile.write("        {")
	
	if StateManager.getBoolean("ENABLE_INPUT_CODE_GENERATION") == True:
		sourceFile.write("            SYS_INP_AddListener(&inputListener);")
		sourceFile.writeNewLine()
		
	sourceFile.write("            legatoState = LEGATO_STATE_RUNNING;")
	sourceFile.writeNewLine()
	sourceFile.write("            break;")
	sourceFile.write("        }")
	sourceFile.write("        case LEGATO_STATE_RUNNING:")
	sourceFile.write("        {")
	sourceFile.write("            //Legato_DemoModeProcessEvents();")
	sourceFile.writeNewLine()
	sourceFile.write("            legato_updateCurrentScreen();")
	sourceFile.writeNewLine()
	sourceFile.write("            leUpdate(0);")
	sourceFile.writeNewLine()
	sourceFile.write("            break;")
	sourceFile.write("        }")
	sourceFile.writeNewLine()
	sourceFile.write("        default:")
	sourceFile.write("        {")
	sourceFile.write("            break;")
	sourceFile.write("        }")
	sourceFile.write("    }")
	sourceFile.write("}")
	sourceFile.writeNewLine()
	
	if StateManager.getBoolean("ENABLE_INPUT_CODE_GENERATION") == True:
		sourceFile.write("void touchDownHandler(const SYS_INP_TouchStateEvent* const evt)")
		sourceFile.write("{")
		sourceFile.write("    leInput_InjectTouchDown(evt->index, evt->x, evt->y);")
		sourceFile.write("}")
		sourceFile.writeNewLine()
		sourceFile.write("void touchUpHandler(const SYS_INP_TouchStateEvent* const evt)")
		sourceFile.write("{")
		sourceFile.write("    leInput_InjectTouchUp(evt->index, evt->x, evt->y);")
		sourceFile.write("}")
		sourceFile.writeNewLine()
		sourceFile.write("void touchMoveHandler(const SYS_INP_TouchMoveEvent* const evt)")
		sourceFile.write("{")
		sourceFile.write("    leInput_InjectTouchMoved(evt->index, evt->x, evt->y);")
		sourceFile.write("}")
		sourceFile.writeNewLine()

	sourceFile.close()
	
	fileDict[sourceFile.name] = sourceFile