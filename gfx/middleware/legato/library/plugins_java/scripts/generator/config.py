def generateConfigFile():
	configFile = File("legato_config.h")
	configFile.summary = "Autogenerated configuration file for the Legato graphics library."
	configFile.description = configFile.summary
	configFile.writeDescription()
	configFile.writeNewLine()
	
	configFile.write("#ifndef LE_CONFIG_H")
	configFile.write("#define LE_CONFIG_H")
	configFile.writeNewLine()
	
	configFile.write("// DOM-IGNORE-BEGIN")
	configFile.write("#ifdef __cplusplus  // Provide C++ Compatibility")
	configFile.write('extern "C" {')
	configFile.write("#endif")
	configFile.write("// DOM-IGNORE-END")
	configFile.writeNewLine()
	
	configFile.write("/* export macros for shared libraries */")
	configFile.write("#ifdef _WIN32")
	configFile.write("#ifdef LIBRARY")
	configFile.write("#define LIB_EXPORT __declspec( dllexport )")
	configFile.write("#else")
	configFile.write("#define LIB_EXPORT __declspec( dllimport )")
	configFile.write("#endif")
	configFile.write("#else")
	configFile.write("#define LIB_EXPORT")
	configFile.write("#endif")
	configFile.writeNewLine()
	configFile.writeNewLine()
	configFile.write("#define LE_GLOBAL_COLOR_MODE               LE_COLOR_MODE_%s" % StateManager.getProjectColorMode().toString())
	configFile.write("#define LE_TOUCH_ORIENTATION               %d" % StateManager.getInteger("INPUT_ORIENTATION"))
	configFile.writeNewLine()
	configFile.write("#define LE_ASSERT_ENABLE                   %d" % int(StateManager.getBoolean("ASSERT_ENABLE")))
	configFile.writeNewLine()
	configFile.write("#define LE_PREEMPTION_LEVEL                %s" % StateManager.getInteger("PREEMPTION_LEVEL"))
	configFile.write("#define LE_STREAMING_ENABLED               %d" % int(StateManager.getBoolean("ENABLE_EXTERNAL_MEDIA")))
	configFile.writeNewLine()
	configFile.write("#if LE_STREAMING_ENABLED == 1")
	configFile.write("#define LE_ASSET_DECODER_CACHE_SIZE        %d" % StateManager.getInteger("IMAGE_CACHE_SIZE"))
	configFile.write("#define LE_ASSET_DECODER_USE_PIXEL_CACHE   %d" % int(StateManager.getBoolean("ENABLE_IMAGE_DECODE_CACHE")))
	configFile.write("#define LE_ASSET_DECODER_USE_PALETTE_CACHE %d" % int(StateManager.getBoolean("ENABLE_IMAGE_LOOKUP_CACHE")))
	configFile.write("#define LE_ASSET_DECODER_USE_MASK_CACHE    %d" % int(StateManager.getBoolean("ENABLE_IMAGE_MASK_CACHE")))
	configFile.write("#define LE_ASSET_DECODER_USE_BLEND_CACHE   %d" % int(StateManager.getBoolean("ENABLE_IMAGE_BLEND_CACHE")))
	configFile.write("#define LE_RASTERFONT_GLYPH_CACHE_SIZE     %d" % StateManager.getInteger("FONT_CACHE_SIZE"))
	configFile.write("#endif")
	configFile.writeNewLine()
	configFile.write("// default Font Support")
	configFile.write("#define LE_INCLUDE_DEFAULT_1BPP_FONT       %d" % int(StateManager.getBoolean("INCLUDE_1BPP_FONT")))
	configFile.write("#define LE_INCLUDE_DEFAULT_8BPP_FONT       %d" % int(StateManager.getBoolean("INCLUDE_8BPP_FONT")))
	configFile.writeNewLine()
	configFile.write("// widget inclusion")
	configFile.write("#define LE_ARC_WIDGET_ENABLED              %d" % int(StateManager.getBoolean("ENABLE_ARC_WIDGET")))
	configFile.write("#define LE_BARGRAPH_WIDGET_ENABLED         %d" % int(StateManager.getBoolean("ENABLE_BARGRAPH_WIDGET")))
	configFile.write("#define LE_BUTTON_WIDGET_ENABLED           %d" % int(StateManager.getBoolean("ENABLE_BUTTON_WIDGET")))
	configFile.write("#define LE_CHECKBOX_WIDGET_ENABLED         %d" % int(StateManager.getBoolean("ENABLE_CHECKBOX_WIDGET")))
	configFile.write("#define LE_CIRCLE_WIDGET_ENABLED           %d" % int(StateManager.getBoolean("ENABLE_CIRCLE_WIDGET")))
	configFile.write("#define LE_CIRCULARGAUGE_WIDGET_ENABLED    %d" % int(StateManager.getBoolean("ENABLE_CIRCULARGAUGE_WIDGET")))
	configFile.write("#define LE_CIRCULARSLIDER_WIDGET_ENABLED   %d" % int(StateManager.getBoolean("ENABLE_CIRCULARSLIDER_WIDGET")))
	configFile.write("#define LE_DRAWSURFACE_WIDGET_ENABLED      %d" % int(StateManager.getBoolean("ENABLE_DRAWSURFACE_WIDGET")))
	configFile.write("#define LE_GRADIENT_WIDGET_ENABLED         %d" % int(StateManager.getBoolean("ENABLE_GRADIENT_WIDGET")))
	configFile.write("#define LE_GROUPBOX_WIDGET_ENABLED         %d" % int(StateManager.getBoolean("ENABLE_GROUPBOX_WIDGET")))
	configFile.write("#define LE_IMAGE_WIDGET_ENABLED            %d" % int(StateManager.getBoolean("ENABLE_IMAGE_WIDGET")))
	configFile.write("#define LE_IMAGEROTATE_WIDGET_ENABLED      %d" % int(StateManager.getBoolean("ENABLE_IMAGEROTATE_WIDGET")))
	configFile.write("#define LE_IMAGESCALE_WIDGET_ENABLED       %d" % int(StateManager.getBoolean("ENABLE_IMAGESCALE_WIDGET")))
	configFile.write("#define LE_IMAGESEQUENCE_WIDGET_ENABLED    %d" % int(StateManager.getBoolean("ENABLE_IMAGESEQUENCE_WIDGET")))
	configFile.write("#define LE_KEYPAD_WIDGET_ENABLED           %d" % int(StateManager.getBoolean("ENABLE_KEYPAD_WIDGET")))
	configFile.write("#define LE_LABEL_WIDGET_ENABLED            %d" % int(StateManager.getBoolean("ENABLE_LABEL_WIDGET")))
	configFile.write("#define LE_LINE_WIDGET_ENABLED             %d" % int(StateManager.getBoolean("ENABLE_LINE_WIDGET")))
	configFile.write("#define LE_LINEGRAPH_WIDGET_ENABLED        %d" % int(StateManager.getBoolean("ENABLE_LINEGRAPH_WIDGET")))
	configFile.write("#define LE_LIST_WIDGET_ENABLED             %d" % int(StateManager.getBoolean("ENABLE_LIST_WIDGET")))
	configFile.write("#define LE_LISTWHEEL_WIDGET_ENABLED        %d" % int(StateManager.getBoolean("ENABLE_LISTWHEEL_WIDGET")))
	configFile.write("#define LE_PIECHART_WIDGET_ENABLED         %d" % int(StateManager.getBoolean("ENABLE_PIECHART_WIDGET")))
	configFile.write("#define LE_PROGRESSBAR_WIDGET_ENABLED      %d" % int(StateManager.getBoolean("ENABLE_PROGRESSBAR_WIDGET")))
	configFile.write("#define LE_RADIALMENU_WIDGET_ENABLED       %d" % int(StateManager.getBoolean("ENABLE_RADIALMENU_WIDGET")))
	configFile.write("#define LE_RADIOBUTTON_WIDGET_ENABLED      %d" % int(StateManager.getBoolean("ENABLE_RADIOBUTTON_WIDGET")))
	configFile.write("#define LE_RECTANGLE_WIDGET_ENABLED        %d" % int(StateManager.getBoolean("ENABLE_RECTANGLE_WIDGET")))
	configFile.write("#define LE_SCROLLBAR_WIDGET_ENABLED        %d" % int(StateManager.getBoolean("ENABLE_SCROLLBAR_WIDGET")))
	configFile.write("#define LE_SLIDER_WIDGET_ENABLED           %d" % int(StateManager.getBoolean("ENABLE_SLIDER_WIDGET")))
	configFile.write("#define LE_TEXTFIELD_WIDGET_ENABLED        %d" % int(StateManager.getBoolean("ENABLE_TEXTFIELD_WIDGET")))
	configFile.write("#define LE_TOUCHTEST_WIDGET_ENABLED        %d" % int(StateManager.getBoolean("ENABLE_TOUCHTEST_WIDGET")))
	configFile.write("#define LE_WINDOW_WIDGET_ENABLED           %d" % int(StateManager.getBoolean("ENABLE_WINDOW_WIDGET")))
	configFile.writeNewLine()
	configFile.write("// memory configuration")
	configFile.write("#define LE_USE_DEBUG_ALLOCATOR             %d" % int(StateManager.getBoolean("ENABLE_DEBUG_ALLOCATOR")))
	configFile.write("#define LE_MALLOC_ZEROIZE                  %d" % int(StateManager.getBoolean("ENABLE_ALLOC_ZEROIZE")))
	configFile.writeNewLine()
	configFile.write("#if LE_USE_DEBUG_ALLOCATOR == 1")
	configFile.write("#define LE_USE_ALLOCATION_TRACKING         %d" % int(StateManager.getBoolean("ENABLE_ALLOC_TRACKING")))
	configFile.write("#endif")
	configFile.writeNewLine()
	configFile.write("// variable heap configuration")
	configFile.write("#define LE_VARIABLEHEAP_DEBUGLEVEL         %d" % StateManager.getInteger("VARIABLE_HEAP_DEBUG_LEVEL"))
	configFile.write("#define LE_VARIABLEHEAP_SIZE               %d" % StateManager.getInteger("VARIABLE_HEAP_SIZE"))
	configFile.write("#define LE_VARIABLEHEAP_MINALLOCSIZE       4")
	configFile.write("#define LE_VARIABLEHEAP_ALIGNMENT          4")
	configFile.write("#define LE_VARIABLEHEAP_BESTFIT            %d" % int(StateManager.getBoolean("VARIABLE_HEAP_USE_BEST_FIT")))
	configFile.writeNewLine()
	configFile.write("// fixed heap configuration")
	configFile.write("#define LE_FIXEDHEAP_ENABLE                %d" % int(StateManager.getBoolean("ENABLE_FIXED_HEAP")))
	configFile.write("#define LE_FIXEDHEAP_DEBUG                 %d" % int(StateManager.getBoolean("FIXED_HEAP_ENABLE_DEBUG")))
	configFile.write("#define LE_FIXEDHEAP_SIZE_16               %d" % StateManager.getInteger("FIXED_HEAP_SIZE_16"))
	configFile.write("#define LE_FIXEDHEAP_SIZE_32               %d" % StateManager.getInteger("FIXED_HEAP_SIZE_32"))
	configFile.write("#define LE_FIXEDHEAP_SIZE_64               %d" % StateManager.getInteger("FIXED_HEAP_SIZE_64"))
	configFile.write("#define LE_FIXEDHEAP_SIZE_128              %d" % StateManager.getInteger("FIXED_HEAP_SIZE_128"))
	configFile.write("#define LE_FIXEDHEAP_SIZE_196              %d" % StateManager.getInteger("FIXED_HEAP_SIZE_196"))
	configFile.write("#define LE_FIXEDHEAP_SIZE_256              %d" % StateManager.getInteger("FIXED_HEAP_SIZE_256"))
	configFile.writeNewLine()
	configFile.write("// renderer configuration")
	configFile.write("//#define LE_VSYNC_STALL")
	configFile.writeNewLine()
	configFile.write("#define LE_LAYER_COUNT                     %d" % StateManager.getInteger("LIBRARY_LAYER_COUNT"))
	configFile.writeNewLine()
	configFile.write("#if LE_LAYER_COUNT <= 0")
	configFile.write("#error LE_LAYER_COUNT must be greater than or equal to 1")
	configFile.write("#endif")
	configFile.writeNewLine()
	configFile.write("#define LE_WIDGET_MAX_EVENT_FILTERS        2")
	configFile.writeNewLine()
	configFile.write("// renderer config")
	configFile.write("#define LE_ALPHA_BLENDING_ENABLED          %d" % int(StateManager.getBoolean("ENABLE_ALPHA_BLENDING")))
	configFile.write("#define LE_SCRATCH_BUFFER_SIZE_KB          %d" % StateManager.getInteger("SCRATCH_BUFFER_SIZE"))
	configFile.write("#define LE_USE_ARC_SCAN_FILL               1")
	configFile.write("#define LE_ARC_SMOOTH_EDGE                 LE_FALSE")
	configFile.write("#define LE_RENDER_LEFTRIGHT                %d" % int(StateManager.getBoolean("RENDER_LEFTRIGHT")))
	configFile.writeNewLine()
	configFile.writeNewLine()
	configFile.write("//DOM-IGNORE-BEGIN")
	configFile.write("#ifdef __cplusplus")
	configFile.write("}")
	configFile.write("#endif")
	configFile.write("//DOM-IGNORE-END")
	configFile.writeNewLine()
	configFile.write("#endif // LE_CONFIG_H")
	
	configFile.close()
	
	global fileDict
	fileDict[configFile.name] = configFile
